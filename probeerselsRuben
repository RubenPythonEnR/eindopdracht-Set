import pygame
import sys
from pygame.locals import *

import random
import itertools
import time
import datetime

moeilijkheid = 2

class Kaart(pygame.sprite.Sprite):
    """de klasse kaart heeft kaart objecten met een kleur, vorm, vulling, aantal en een sprite met een rect. Hiernaast heeft de klasse Kaart
    ook methods het tekenen van de kaarten en een random kaart te trekken"""
    def __init__(self, kleur, vorm, vulling, aantal):
        self.kleur = kleur
        self.vorm = vorm
        self.vulling = vulling
        self.aantal = aantal
        self.attrs = (self.kleur, self.vorm, self.vulling, self.aantal)
        super().__init__()
        self.load()
        self.rect = self.image.get_rect()

    def give_position(self, position):
        self.rect.topleft = position

    def update(self):
        self.load()
        

    def load(self):
        self.image = pygame.image.load(f"D:\MLS\PythonandR\kaarten\{self.return_string()}.gif")
    

    def draw(self, surface):
        surface.blit(self.image, self.rect)

    
    def geef_willekeurige_kaart(stack_kaarten):
        if len(stack_kaarten) > 0:
            willekeurige_kaart = random.choice(stack_kaarten)
        return willekeurige_kaart
    
    
    def return_string(self):
        kleur_naam = {
            0 : "green",
            1 : "purple",
            2 : "red"
            }
        vorm_naam = {
            0 : "diamond",
            1 : "oval",
            2 : "squiggle"
        }
        vulling_naam = {
            0 : "empty",
            1 : "shaded",
            2 : "filled"
        }
        aantal_naam = {
            0 : "1",
            1 : "2",
            2 : "3"
        }
        naam_bestand = kleur_naam[self.kleur] + vorm_naam[self.vorm] + vulling_naam[self.vulling] + aantal_naam[self.aantal]
        return naam_bestand
    
    
class Speelveld:
    """Maakt een klasse speelveld die alle mogelijke kaarten bevat, een speelveld kan maken, sets kan zoeken
    en eventueel extra kaarten kan toevoegen als er geen set is."""
    def __init__(self):
        self.veld = []
        self.aantal_startkaarten = 12
        self.stack_kaarten = [Kaart(tup[0], tup[1], tup[2], tup[3]) for tup in list(itertools.product((0,1,2), repeat=4))]
    
    def maak_speelveld(self):
        kaarten_speelveld = list(random.sample(self.stack_kaarten, self.aantal_startkaarten))
        self.veld += kaarten_speelveld
        self.verwijder_kaarten(kaarten_speelveld)
        return self.veld

    def is_set(kaart1, kaart2, kaart3):
        if ((kaart1.aantal == kaart2.aantal and kaart2.aantal == kaart3.aantal ) or (kaart1.aantal != kaart2.aantal and kaart3.aantal != kaart1.aantal and kaart3.aantal != kaart2.aantal)) and \
        ((kaart1.kleur == kaart2.kleur and kaart2.kleur == kaart3.kleur) or (kaart1.kleur != kaart2.kleur and kaart3.kleur != kaart1.kleur and kaart3.kleur != kaart2.kleur)) and \
        ((kaart1.vorm == kaart2.vorm and kaart2.vorm == kaart3.vorm) or (kaart1.vorm != kaart2.vorm and kaart3.vorm != kaart1.vorm and kaart3.vorm != kaart2.vorm)) and \
        ((kaart1.vulling == kaart2.vulling and kaart2.vulling == kaart3.vulling) or (kaart1.vulling != kaart2.vulling and kaart3.vulling != kaart1.vulling and kaart3.vulling != kaart2.vulling)):
            return True
        return False
    
    def zoek_set(self):
        mogelijke_sets = []
        for i in range(len(self.veld)):
            for j in range(i + 1, len(self.veld)):
                for k in range(j + 1, len(self.veld)):
                    kaart1 = self.veld[i]
                    kaart2 = self.veld[j]
                    kaart3 = self.veld[k]
                    if Speelveld.is_set(kaart1, kaart2, kaart3):
                        mogelijke_sets.append(kaart1)
                        mogelijke_sets.append(kaart2)
                        mogelijke_sets.append(kaart3)
                        for i in mogelijke_sets:
                            print(i.attrs)
                        return mogelijke_sets
        return mogelijke_sets

    def extra_kaarten_speelveld(self):
        if len(self.stack_kaarten) > 2:
            hoeveel_kaarten = 3
        else:
            hoeveel_kaarten = len(self.stack_kaarten)
        if hoeveel_kaarten > 0:
            nieuwe_kaarten = [Kaart.geef_willekeurige_kaart(self.stack_kaarten) for _ in range(hoeveel_kaarten)]
            self.veld += nieuwe_kaarten
            self.verwijder_kaarten(nieuwe_kaarten)
    
    def verwijder_kaarten(self, kaarten):
        for i in kaarten:  
            if i in self.stack_kaarten:
                self.stack_kaarten.remove(i)
    
    def verwijder_kaarten_speelveld(self, selecties):
        for i in selecties:
            self.veld.remove(i)
            
    def nieuw_speelveld(self):
        self.stack_kaarten = list(itertools.product((0,1,2), repeat=4))
        Speelveld.maak_speelveld(self.aantal_startkaarten)

"""Hier begint de echte display en de gameloop"""
pygame.init()

# vaste kleuren en het scherm
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
DISPLAY = pygame.display
DISPLAYSURF = DISPLAY.set_mode((700, 600))
pygame.display.set_caption("Game")


# Text variabelen voor score en timer
speler_score = 0
computer_score = 0
speler_naam = "Speler 1"
computer_naam = "Computer"
lettertype = pygame.font.Font("freesansbold.ttf", 32)

# Timer
lengte_timer = moeilijkheid
overige_tijd = 2 #arbitraire nummer is alleen nodig voor initialisatie
tijdpunt = pygame.time.get_ticks()

def timer():
    """Maakt een timer die afloopt en bij nul kijkt voor een set.
     Het kan ook kaarten verwijderen en toevoegen"""
    global overige_tijd, tijdpunt, computer_score, huidige_tijd, spel_voorbij
    huidige_tijd = pygame.time.get_ticks()
    verstreken_tijd = (huidige_tijd - tijdpunt) // 1000
    overige_tijd = lengte_timer - verstreken_tijd
    spel_voorbij = False

    if overige_tijd <= 0:
        selecties = speelveld.zoek_set()
        if len(selecties)==0:
            print("Er is geen set")
            if len(speelveld.veld) <= 12 and len(speelveld.stack_kaarten) > 0:
                speelveld.extra_kaarten_speelveld()
            else:
                spel_voorbij = True
        else:
            computer_score += 1
            print("Er is een set")
            speelveld.verwijder_kaarten_speelveld(selecties)
            for i in selecties:
                kaart_group.remove(i)
            speelveld.extra_kaarten_speelveld()
        teken_veld(speelveld)
        selecties = []
        tijdpunt = huidige_tijd

    if spel_voorbij:
        eindscore_text = lettertype.render(f"Eindscore: {speler_score} - {computer_score - 1}", False, WHITE)
        DISPLAYSURF.blit(eindscore_text, (420, 550))
        pygame.display.flip()

        # Wachten voor sluiten van het spel
        pygame.time.wait(10000)
        pygame.quit()
        sys.exit()

#zorgen dat er een speelveld wordt opgeroepen en zorgen dat alle sprites van de kaart objecten in 1 keer opgeroepen kunnen worden
kaart_group = pygame.sprite.Group()
speelveld = Speelveld()
speelveld.maak_speelveld()

def teken_veld(speelveld):
    """maakt een speelveld met kaarten in pygame door de speelveld kaarten coordinaten te geven. 
    Deze hangen af van hoeveel kaarten er in het spel zijn"""
    row = 0
    col = 0
    if len(speelveld.veld) <= 12:
        for i in range(len(speelveld.veld)):
            kaart_instance = speelveld.veld[i]
            kaart_instance.give_position((col,row))
            kaart_group.add(kaart_instance)
            if col == 0:
                col +=100
            elif col %300 != 0:
                col += 100
            else:
                row += 200
                col -=300
    if len(speelveld.veld) == 15:
        for i in range(len(speelveld.veld)):
            kaart_instance = speelveld.veld[i]
            kaart_instance.give_position((col,row))
            kaart_group.add(kaart_instance)
            if col == 0:
                col +=100
            elif col %400 != 0:
                col += 100
            else:
                row += 200
                col -=400
teken_veld(speelveld) 


selecties =[]

while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()

        selectie_gemaakt = False

        if event.type == pygame.MOUSEBUTTONDOWN:
            if not selectie_gemaakt:
                for kaart_instance in kaart_group:
                    if kaart_instance.rect.collidepoint(pygame.mouse.get_pos()):
                        print(kaart_instance.attrs)
                        selecties.append(kaart_instance)
                        selectie_gemaakt = True
                        break

            if len(selecties) == 3 and Speelveld.is_set(selecties[0], selecties[1], selecties[2]):
                speelveld.verwijder_kaarten_speelveld(selecties)
                if len(speelveld.veld)< 12:
                    speelveld.extra_kaarten_speelveld()
                teken_veld(speelveld)
                for i in selecties:
                    kaart_group.remove(i)
                selecties = []
                selectie_gemaakt = False
                speler_score += 1
                tijdpunt = huidige_tijd
                print("is een set")
            elif len(selecties) == 3:
                selecties = []
                selectie_gemaakt = False
                computer_score +=1
                print("geen set")
                print(speelveld.zoek_set())
                print(len(speelveld.stack_kaarten))
                
    
    

    #achtergrond zwart met daarop de kaarten
    DISPLAYSURF.fill(BLACK)
    kaart_group.draw(DISPLAYSURF)


    #tijdens de game loop worden hier de timer en de scores aan gegeven
    speler_text = lettertype.render(f"{speler_score}",False, WHITE)
    DISPLAYSURF.blit(speler_text, (600,70))
    speler1_text = lettertype.render(f"{speler_naam}",False, WHITE)
    DISPLAYSURF.blit(speler1_text, (540,20))
    computer_text = lettertype.render(f"{computer_score}",False, WHITE)
    DISPLAYSURF.blit(computer_text, (600,170))
    computer1_text = lettertype.render(f"{computer_naam}",False, WHITE)
    DISPLAYSURF.blit(computer1_text, (530,120))
    timer_text = lettertype.render(f"Timer: {overige_tijd}", False, WHITE)
    DISPLAYSURF.blit(timer_text, (535, 220))

    #constante oproep timer en update van het scherm
    timer()
    DISPLAY.update()
    
