import pygame
import sys
from pygame.locals import *

import random
import itertools
import time
import datetime

class Kaart(pygame.sprite.Sprite):
    """de klasse kaart heeft kaart objecten met een kleur, vorm, vulling, aantal en een sprite met een rect. Hiernaast heeft de klasse Kaart
    ook methods het tekenen van de kaarten en een random kaart te trekken"""
    def __init__(self, kleur, vorm, vulling, aantal):
        self.kleur = kleur
        self.vorm = vorm
        self.vulling = vulling
        self.aantal = aantal
        self.attrs = (self.kleur, self.vorm, self.vulling, self.aantal)
        super().__init__()
        self.load()
        self.rect = self.image.get_rect()

    def give_position(self, position):
        self.rect.topleft = position

    def update(self):
        self.load()
        

    def load(self):
        self.image = pygame.image.load(f"D:\MLS\PythonandR\kaarten\{self.return_string()}.gif")
    
    # def __eq__(self, other):
    #     return self.is_set(other)

    def draw(self, surface):
        surface.blit(self.image, self.rect)

    
    def geef_willekeurige_kaart(stack_kaarten):
        willekeurige_kaart = random.choice(stack_kaarten)
        return willekeurige_kaart
    
    
    def return_string(self):
        kleur_naam = {
            0 : "green",
            1 : "purple",
            2 : "red"
            }
        vorm_naam = {
            0 : "diamond",
            1 : "oval",
            2 : "squiggle"
        }
        vulling_naam = {
            0 : "empty",
            1 : "shaded",
            2 : "filled"
        }
        aantal_naam = {
            0 : "1",
            1 : "2",
            2 : "3"
        }
        naam_bestand = kleur_naam[self.kleur] + vorm_naam[self.vorm] + vulling_naam[self.vulling] + aantal_naam[self.aantal]
        return naam_bestand
    
    
class Speelveld:
    """Maakt een klasse speelveld die alle mogelijke kaarten bevat, een speelveld kan maken, sets kan zoeken
    en eventueel extra kaarten kan toevoegen als er geen set is."""
    def __init__(self):
        self.veld = []
        self.aantal_startkaarten = 12
        self.stack_kaarten = [Kaart(tup[0], tup[1], tup[2], tup[3]) for tup in list(itertools.product((0,1,2), repeat=4))]
    
    def maak_speelveld(self):
        kaarten_speelveld = list(random.sample(self.stack_kaarten, self.aantal_startkaarten))
        self.veld += kaarten_speelveld
        self.verwijder_kaarten(kaarten_speelveld)
        return self.veld

    def is_set(kaart1, kaart2, kaart3):
        if (kaart1.aantal == kaart2.aantal == kaart3.aantal ) or ((kaart1.aantal != kaart2.aantal !=kaart3.aantal) and (kaart1.aantal != kaart3.aantal)):
            if (kaart1.kleur == kaart2.kleur == kaart3.kleur) or ((kaart1.kleur != kaart2.kleur !=kaart3.kleur)and (kaart1.kleur != kaart3.kleur)):
                if (kaart1.vorm == kaart2.vorm == kaart3.vorm) or ((kaart1.vorm != kaart2.vorm !=kaart3.vorm)and (kaart1.vorm != kaart3.vorm)):
                    if (kaart1.vulling == kaart2.vulling == kaart3.vulling) or ((kaart1.vulling != kaart2.vulling !=kaart3.vulling)and (kaart1.vulling != kaart3.vulling)):
                        return True
        return False
    
    def zoek_set(self):
            mogelijke_sets = []
            for i in range(len(self.veld)):
                for j in range(i + 1, len(self.veld)):
                    for k in range(j + 1, len(self.veld)):
                        kaart1 = self.veld[i]
                        kaart2 = self.veld[j]
                        kaart3 = self.veld[k]
                        if Speelveld.is_set(kaart1, kaart2, kaart3):
                            mogelijke_sets.append([kaart1,kaart2,kaart3])
            return mogelijke_sets

    def extra_kaarten_speelveld(self):
        nieuwe_kaarten = [Kaart.geef_willekeurige_kaart(self.stack_kaarten) for _ in range(3)]
        self.veld += nieuwe_kaarten
        self.verwijder_kaarten(nieuwe_kaarten)
    
    def verwijder_kaarten(self, kaarten):
        for i in kaarten:  
            self.stack_kaarten.remove(i)
    
    def verwijder_kaarten_speelveld(self, setje):
        for i in setje:
            self.veld.remove(i)
            
    def nieuw_speelveld(self):
        self.stack_kaarten = list(itertools.product((0,1,2), repeat=4))
        Speelveld.maak_speelveld(self.aantal_startkaarten)

class Spel:
    """Beschrijft de onderdelen van het spel en de mogelijke acties zoals een timer, en een scorde bord."""
    def __init__(self):
        self.speler = 0
        self.computer = 0
        self.moeilijkheid = 30
    
    def start_spel(self):
        Speelveld.maak_speelveld()
        Spel.timer(self.moeilijkheid)

    def timer(self, moeilijkheid):
        tijd = moeilijkheid
        while tijd > 0:
            timer = datetime.timedelta(seconds = moeilijkheid)
            #visualiseer timer
            print(timer, end="\r")
            time.sleep(1)
            tijd -=1
        if len(Speelveld.zoek_set()) == False:
            Speelveld.extra_kaarten_speelveld()
        else:
            Spel.punt_toewijzen(self.computer)

    def punt_toewijzen(punten):
        punten +=1
        return punten

    def check_selectie(self, selectie1, selectie2, selectie3):
        if Speelveld.is_set(selectie1, selectie2, selectie3):
            print("true")
            setje = [selectie1, selectie2, selectie3]
            #Spel.timer(self.moeilijkheid)
            #Speelveld.verwijder_kaarten(setje)
            #Speelveld.extra_kaarten_speelveld()
            #Spel.punt_toewijzen(self.speler)
        else:
            print("false")
            #Spel.punt_toewijzen(self.computer)

    def nieuw_spel(self):
        self.speler = 0
        self.computer = 0
        Speelveld.nieuw_speelveld()
        Spel.timer(self.moeilijkheid)


"""Hier begint de echte display en de gameloop"""
pygame.init()

FPS = 5
FramePerSec = pygame.time.Clock()

# Predefined some colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

# Screen information
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 600

DISPLAY = pygame.display
DISPLAYSURF = DISPLAY.set_mode((700, 600))
DISPLAYSURF.fill(WHITE)
pygame.display.set_caption("Game")


# Text variabelen voor score en tijd
wit = (255,255,255)
speler_score = 0
computer_score = 0
speler_naam = "Speler 1"
computer_naam = "Computer"
lettertype = pygame.font.Font("freesansbold.ttf", 32)

kaart_group = pygame.sprite.Group()
spel = Spel()
speelveld = Speelveld()
speelveld.maak_speelveld()

#creates a field of cards
def teken_veld(speelveld):
    row = 0
    col = 0
    for i in range(len(speelveld.veld)):
        kaart_instance = speelveld.veld[i]
        kaart_instance.give_position((col,row))
        kaart_group.add(kaart_instance)
        if col == 0:
            col +=100
        elif col %300 != 0:
            col += 100
        else:
            row += 200
            col -=300
teken_veld(speelveld) 


selecties =[]

while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()

        selectie_gemaakt = False

        if event.type == pygame.MOUSEBUTTONDOWN:
            if not selectie_gemaakt:
                for kaart_instance in kaart_group:
                    if kaart_instance.rect.collidepoint(pygame.mouse.get_pos()):
                        print(kaart_instance.attrs)
                        selecties.append(kaart_instance)
                        selectie_gemaakt = True
                        break

            if len(selecties) == 3 and Speelveld.is_set(selecties[0], selecties[1], selecties[2]):
                speelveld.verwijder_kaarten_speelveld(selecties)
                for i in selecties:
                    kaart_group.remove(i)
                speelveld.extra_kaarten_speelveld()
                teken_veld(speelveld)
                selecties = []
                selectie_gemaakt = False
                speler_score += 1
                print("tadaa")
            elif len(selecties) == 3:
                selecties = []
                selectie_gemaakt = False
                print("geen set")
    
    


    DISPLAYSURF.fill(BLACK)
    kaart_group.draw(DISPLAYSURF)

    speler_text = lettertype.render(f"{speler_score}",False, wit)
    DISPLAYSURF.blit(speler_text, (600,70))
    speler1_text = lettertype.render(f"{speler_naam}",False, wit)
    DISPLAYSURF.blit(speler1_text, (540,20))
    computer_text = lettertype.render(f"{computer_score}",False, wit)
    DISPLAYSURF.blit(computer_text, (600,170))
    computer1_text = lettertype.render(f"{computer_naam}",False, wit)
    DISPLAYSURF.blit(computer1_text, (530,120))

    DISPLAY.update()
    FramePerSec.tick(FPS)
